{"version":3,"file":"static/js/911.9b3df305.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Error/Error.styled.js","components/Error/Error.js","components/Filter/Filter.styled.js","components/Loader.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport { Form } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contact/contactsSlice';\nimport { addContact } from 'redux/contact/operations';\nimport { useId } from 'react';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={message => <p>{message}</p>} />;\n};\n\nexport const ContactForm = ({ onSubmit }) => {\n  const labelNameId = useId();\n  const labelNumberId = useId();\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onSubmitForm = ({ name, number }, { resetForm }) => {\n    const existingName = contacts.some(\n      contact => contact.name.trim().toLowerCase() === name.trim().toLowerCase()\n    );\n    if (existingName) {\n      console.log(`${name} is already in contacts`);\n      return;\n    }\n    const contact = { name: name.trim(), number };\n    dispatch(addContact(contact));\n    resetForm();\n  };\n\n  return (\n    <Formik initialValues={initialValues} onSubmit={onSubmitForm}>\n      {({ isSubmitting }) => (\n        <Form autoComplete=\"off\">\n          <div>\n            <label htmlFor={labelNameId}>Name</label>\n            <div>\n              <input\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                placeholder=\"Name\"\n                id={labelNameId}\n              />\n            </div>\n            <FormError name=\"name\" />\n          </div>\n\n          <div>\n            <label htmlFor={labelNumberId}>Number</label>\n            <div>\n              <input\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                placeholder=\"Phone number\"\n                id={labelNumberId}\n              />\n            </div>\n            <FormError name=\"number\" />\n          </div>\n          <button type=\"submit\" disabled={isSubmitting}>\n            Add contact\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nexport const Li = styled.li`\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n`;\nexport const Button = styled.button`\n  background-color: transparent;\n  border-color: transparent;\n  color: red;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Ul, Li, Button } from './ContactList.styled.js';\nimport { CgTrash } from 'react-icons/cg';\nimport { deleteContact } from 'redux/contact/operations.js';\nimport { selectLoading } from 'redux/contact/contactsSlice.js';\nimport {\n  selectContacts,\n  selectFilteredContacts,\n} from 'redux/contact/contactsSlice.js';\n\nexport const ContactList = () => {\n  const filteredContact = useSelector(selectFilteredContacts);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  if (!contacts.length) return <p>The Phonebook is empty!</p>;\n  if (!filteredContact.length) return null;\n  return (\n    <Ul>\n      {filteredContact.map(({ id, name, number }) => (\n        <Li key={id}>\n          {name + ':' + number}\n          {\n            <Button\n              type=\"button\"\n              data-id={id}\n              onClick={() => dispatch(deleteContact(id))}\n              disabled={isLoading}\n            >\n              <CgTrash size={20} />\n            </Button>\n          }\n        </Li>\n      ))}\n    </Ul>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ErrorDiv = styled.div`\n  font-size: 16px;\n  color: red;\n  text-align: center;\n`;\n","import { ErrorDiv } from './Error.styled';\n\nexport const Error = () => {\n  return (\n    <ErrorDiv>\n      <p>OOPS! There was an ERROR!</p>\n    </ErrorDiv>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filteredContacts, selectFilter } from 'redux/filter/filtersSlice';\nimport { useId } from 'react';\n\nexport function Filter() {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const inputId = useId();\n\n  return (\n    <>\n      <label htmlFor={inputId}>Find contacts by name</label>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Name\"\n          value={filter}\n          onChange={e => dispatch(filteredContacts(e.currentTarget.value))}\n          id={inputId}\n        />\n      </div>\n    </>\n  );\n}\n","import { RotatingLines } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Error } from 'components/Error/Error';\nimport { Filter } from 'components/Filter/Filter.styled';\nimport { Loader } from 'components/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectLoading } from 'redux/contact/contactsSlice';\nimport { fetchContacts } from 'redux/contact/operations';\nimport { Helmet } from 'react-helmet-async';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  const isError = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      {isLoading && !isError && <Loader />}\n      {isError && <Error />}\n      {!isError && (\n        <>\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["Form","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","initialValues","name","number","FormError","_ref","_jsx","ErrorMessage","render","message","children","ContactForm","_ref2","onSubmit","labelNameId","useId","labelNumberId","contacts","useSelector","selectContacts","dispatch","useDispatch","Formik","_ref3","_ref4","resetForm","existingName","some","contact","trim","toLowerCase","console","log","concat","addContact","_ref5","isSubmitting","_jsxs","autoComplete","htmlFor","type","pattern","title","placeholder","id","disabled","Ul","Li","Button","_templateObject3","ContactList","filteredContact","selectFilteredContacts","isLoading","selectLoading","length","map","onClick","deleteContact","CgTrash","size","ErrorDiv","Error","Filter","filter","selectFilter","inputId","_Fragment","value","onChange","e","filteredContacts","currentTarget","Loader","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","Contacts","isError","selectError","useEffect","fetchContacts","Helmet"],"sourceRoot":""}