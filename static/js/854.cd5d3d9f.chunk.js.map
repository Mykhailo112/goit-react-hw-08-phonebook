{"version":3,"file":"static/js/854.cd5d3d9f.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.js","pages/Register.js"],"sourcesContent":["import styled from 'styled-components';\nimport { ImUser, ImMail3, ImKey } from 'react-icons/im';\nimport { Form, Field } from 'formik';\n\nexport const FormStyle = styled(Form)`\n  padding: 18px 12px;\n  margin-bottom: 24px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 18px;\n`;\n\nexport const InputWrap = styled.div`\n  position: relative;\n`;\n\nexport const Input = styled(Field)`\n  width: 250px;\n  padding: 4px 8px 4px 28px;\n  border: 2px solid #000000;\n  border-radius: 8px;\n  margin-top: 4px;\n`;\n\nexport const IconUser = styled(ImUser)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n  fill: #757575;\n`;\n\nexport const IconEmail = styled(ImMail3)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n  fill: #757575;\n`;\n\nexport const IconPassword = styled(ImKey)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n  fill: #757575;\n`;\n\nexport const Button = styled.button`\n  width: 250px;\n  color: #ffffff;\n  background-color: #ea8a2a;\n  border: transparent;\n  border-radius: 8px;\n  padding: 4px 8px;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n  }\n`;\n\nexport const FormText = styled.p`\n  color: red;\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport { object, string } from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/auth-operations';\nimport {\n  Button,\n  FormStyle,\n  FormText,\n  IconUser,\n  IconEmail,\n  IconPassword,\n  Input,\n  InputWrap,\n} from './RegisterForm.styled';\nimport { useId } from 'react';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <FormText>{message}</FormText>}\n    />\n  );\n};\n\nconst validationScheme = object().shape({\n  name: string().min(5).max(50).required(),\n  email: string().email().required(),\n  password: string()\n    .matches(\n      /(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]{6,}/g,\n      'does not match the required format'\n    )\n    .required(),\n});\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n  const labelNameId = useId();\n  const labelEmailId = useId();\n  const labelPasswordId = useId();\n\n  const handleSubmit = ({ name, email, password }, { resetForm }) => {\n    dispatch(\n      register({\n        name,\n        email,\n        password,\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationScheme}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <FormStyle autoComplete=\"off\">\n          <div>\n            <label htmlFor={labelNameId}>Name</label>\n            <InputWrap>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                placeholder=\"name\"\n                id={labelNameId}\n              />\n              <IconUser />\n            </InputWrap>\n            <FormError name=\"name\" />\n          </div>\n\n          <div>\n            <label htmlFor={labelEmailId}>E-mail</label>\n            <InputWrap>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                placeholder=\"e-mail\"\n                id={labelEmailId}\n              />\n              <IconEmail />\n            </InputWrap>\n            <FormError name=\"email\" />\n          </div>\n\n          <div>\n            <label htmlFor={labelPasswordId}>Password</label>\n            <InputWrap>\n              <Input\n                type=\"password\"\n                name=\"password\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                placeholder=\"password\"\n                id={labelPasswordId}\n              />\n              <IconPassword />\n            </InputWrap>\n            <FormError name=\"password\" />\n          </div>\n\n          <Button type=\"submit\" disabled={isSubmitting}>\n            Register\n          </Button>\n        </FormStyle>\n      )}\n    </Formik>\n  );\n}\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Helmet } from 'react-helmet-async';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["FormStyle","styled","Form","_templateObject","_taggedTemplateLiteral","InputWrap","_templateObject2","Input","Field","_templateObject3","IconUser","ImUser","_templateObject4","IconEmail","ImMail3","_templateObject5","IconPassword","ImKey","_templateObject6","Button","_templateObject7","FormText","_templateObject8","initialValues","name","email","password","FormError","_ref","_jsx","ErrorMessage","render","message","children","validationScheme","object","shape","string","min","max","required","matches","RegisterForm","dispatch","useDispatch","labelNameId","useId","labelEmailId","labelPasswordId","Formik","validationSchema","onSubmit","_ref2","_ref3","resetForm","register","_ref4","isSubmitting","_jsxs","autoComplete","htmlFor","type","title","placeholder","id","disabled","Register","Helmet"],"sourceRoot":""}