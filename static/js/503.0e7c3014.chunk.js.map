{"version":3,"file":"static/js/503.0e7c3014.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.js","pages/Login.js"],"sourcesContent":["import styled from 'styled-components';\nimport { ImMail3, ImKey } from 'react-icons/im';\nimport { Form, Field } from 'formik';\n\nexport const FormStyle = styled(Form)`\n  padding: 18px 12px;\n  margin-bottom: 24px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 18px;\n`;\n\nexport const InputWrap = styled.div`\n  position: relative;\n`;\n\nexport const Input = styled(Field)`\n  width: 250px;\n  padding: 4px 8px 4px 28px;\n  border: 2px solid #000000;\n  border-radius: 8px;\n  margin-top: 4px;\n`;\n\nexport const IconEmail = styled(ImMail3)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n  fill: #757575;\n`;\n\nexport const IconPassword = styled(ImKey)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n  fill: #757575;\n`;\n\nexport const Button = styled.button`\n  width: 250px;\n  color: #ffffff;\n  background-color: #ea8a2a;\n  border: transparent;\n  border-radius: 8px;\n  padding: 4px 8px;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n  }\n`;\n\nexport const FormText = styled.p`\n  color: red;\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport { object, string } from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/auth-operations';\nimport {\n  Button,\n  FormStyle,\n  FormText,\n  IconEmail,\n  IconPassword,\n  Input,\n  InputWrap,\n} from './LoginForm.styled';\nimport { useId } from 'react';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <FormText>{message}</FormText>}\n    />\n  );\n};\n\nconst validationScheme = object().shape({\n  email: string().email().required(),\n  password: string().required(),\n});\n\nexport function LoginForm() {\n  const dispatch = useDispatch();\n  const labelEmailId = useId();\n  const labelPasswordId = useId();\n\n  const handleSubmit = ({ email, password }, { resetForm }) => {\n    dispatch(\n      logIn({\n        email,\n        password,\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationScheme}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <FormStyle autoComplete=\"off\">\n          <div>\n            <label htmlFor={labelEmailId}>E-mail</label>\n            <InputWrap>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                placeholder=\"e-mail\"\n                id={labelEmailId}\n              />\n              <IconEmail />\n            </InputWrap>\n            <FormError name=\"email\" />\n          </div>\n\n          <div>\n            <label htmlFor={labelPasswordId}>Password</label>\n            <InputWrap>\n              <Input\n                type=\"password\"\n                name=\"password\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                placeholder=\"password\"\n                id={labelPasswordId}\n              />\n              <IconPassword />\n            </InputWrap>\n            <FormError name=\"password\" />\n          </div>\n\n          <Button type=\"submit\" disabled={isSubmitting}>\n            LogIn\n          </Button>\n        </FormStyle>\n      )}\n    </Formik>\n  );\n}\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Helmet } from 'react-helmet-async';\n\nexport default function Login() {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n}\n"],"names":["FormStyle","styled","Form","_templateObject","_taggedTemplateLiteral","InputWrap","_templateObject2","Input","Field","_templateObject3","IconEmail","ImMail3","_templateObject4","IconPassword","ImKey","_templateObject5","Button","_templateObject6","FormText","_templateObject7","initialValues","email","password","FormError","_ref","name","_jsx","ErrorMessage","render","message","children","validationScheme","object","shape","string","required","LoginForm","dispatch","useDispatch","labelEmailId","useId","labelPasswordId","Formik","validationSchema","onSubmit","_ref2","_ref3","resetForm","logIn","_ref4","isSubmitting","_jsxs","autoComplete","htmlFor","type","title","placeholder","id","disabled","Login","Helmet"],"sourceRoot":""}